/**
@file CSimpleLatentActions.h

En este fichero se implementan algunas acciones 
latentes básicas.

@author Gonzalo Flórez
@date Diciembre 2010

*/

#pragma once

#ifndef __AI_SimpleLatentActions_H
#define __AI_SimpleLatentActions_H

#include "LatentAction.h"

#include "Logic/Entity/Entity.h"

using namespace Logic;

namespace AI 
{
	/**
	Esta acción espera durante un periodo de tiempo (s) indicado en el constructor.
	*/
	class CLAWait : public CLatentAction
	{
	public:
		/**
		Constructor.
		
		@param time Tiempo (ms) de espera
		*/
		CLAWait(unsigned long time) : CLatentAction(), _time(time) {};

		/**
		Constructor. Espera tiempo infinito

		*/
		CLAWait() : CLatentAction(), _time(INFINITE_TIME) {};

		/**
		Destructor
		*/
		~CLAWait() {};

		/**
		Método invocado al principio de la ejecución de la acción,
		para que se realicen las tareas que son únicamente necesarias
		al principio (y no durante toda la vida de la acción).
		<p>
		Al comenzar se obtiene el tiempo actual y se calcula el 
		tiempo en el que terminará la acción mediante el atributo _time

		@return Estado de la función; si se indica que la
		acción a terminado (LatentAction::Completed), se invocará
		al OnStop().
		*/
		virtual LAStatus OnStart();

		/**
		Método invocado al final de la ejecución de la acción,
		para que se realicen las tareas que son únicamente necesarias
		al final (y no durante toda la vida de la acción).

		En la mayoría de los casos este método no hace nada.
		*/
		virtual void OnStop();

		/**
		Método invocado cíclicamente para que se continúe con la
		ejecución de la acción.
		<p>
		En cada paso de ejecución se obtiene el tiempo actual 
		y se comprueba si se debe acabar la acción.

		@return Estado de la acción tras la ejecución del método;
		permite indicar si la acción ha terminado o se ha suspendido.
		*/
		virtual LAStatus OnRun() ;

		/**
		Método invocado cuando la acción ha sido cancelada (el comportamiento
		al que pertenece se ha abortado por cualquier razón).

		La tarea puede en este momento realizar las acciones que
		considere oportunas para "salir de forma ordenada".

		@note <b>Importante:</b> el Abort <em>no</em> provoca la ejecución
		de OnStop().
		*/
		virtual LAStatus OnAbort() ;

	protected:
		/**
		Tiempo (ms) de espera
		*/
		unsigned long _time;
		/**
		Tiempo (ms) en el que se termina la acción
		*/
		unsigned long _endingTime;

	private:
		const int INFINITE_TIME = 24 * 60 * 60 * 1000; // 24h deberían ser suficientes ^_^'
	};

} //namespace AI 

#endif // __AI_SimpleLatentActions_H